name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: grocery_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 20s

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.5'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run migrations
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: runner
          DB_PASSWORD: postgres
          DB_NAME: grocery_test
          DB_SSLMODE: disable
        run: |
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          migrate -path migrations -database "postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME?sslmode=$DB_SSLMODE" up

      - name: Run tests with coverage
        env:
          # Test Database Configuration
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_USER: runner
          TEST_DB_PASSWORD: postgres
          TEST_DB_NAME: grocery_test
          TEST_DB_SSLMODE: disable
          # Required Config Values (to pass validation)
          DB_PASSWORD: postgres
          JWT_SECRET: test-secret
          SMTP_USERNAME: test@example.com
          SMTP_PASSWORD: test-password
          SMTP_FROM: test@example.com
          SMS_API_KEY: test-api-key
          SMS_USERNAME: test-username
          OAUTH_CLIENT_ID: test-client-id
          OAUTH_CLIENT_SECRET: test-client-secret
          OAUTH_REDIRECT_URL: http://localhost:8080/callback
        run: |
          go test -race -coverprofile=coverage.txt -covermode=atomic ./... -v

      - name: Generate coverage report
        run: go tool cover -html=coverage.txt -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: go
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:go"
          upload: true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.5'
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m --out-format=colored-line-number
          skip-cache: true
          install-mode: "binary"