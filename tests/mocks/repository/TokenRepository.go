// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/grocery-service/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// TokenRepository is an autogenerated mock type for the TokenRepository type
type TokenRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, token
func (_m *TokenRepository) Create(ctx context.Context, token *domain.Token) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Token) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredTokens provides a mock function with given fields: ctx
func (_m *TokenRepository) DeleteExpiredTokens(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByProviderID provides a mock function with given fields: ctx, providerID
func (_m *TokenRepository) GetByProviderID(ctx context.Context, providerID string) (*domain.Token, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProviderID")
	}

	var r0 *domain.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Token, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Token); ok {
		r0 = rf(ctx, providerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByToken provides a mock function with given fields: ctx, token
func (_m *TokenRepository) GetByToken(ctx context.Context, token string) (*domain.Token, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *domain.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Token, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Token); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserAndType provides a mock function with given fields: ctx, userID, tokenType
func (_m *TokenRepository) GetByUserAndType(ctx context.Context, userID string, tokenType domain.TokenType) (*domain.Token, error) {
	ret := _m.Called(ctx, userID, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserAndType")
	}

	var r0 *domain.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.TokenType) (*domain.Token, error)); ok {
		return rf(ctx, userID, tokenType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.TokenType) *domain.Token); ok {
		r0 = rf(ctx, userID, tokenType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.TokenType) error); ok {
		r1 = rf(ctx, userID, tokenType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsValid provides a mock function with given fields: ctx, token
func (_m *TokenRepository) IsValid(ctx context.Context, token string) bool {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for IsValid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RevokeToken provides a mock function with given fields: ctx, token
func (_m *TokenRepository) RevokeToken(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTokenRepository creates a new instance of TokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenRepository {
	mock := &TokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
